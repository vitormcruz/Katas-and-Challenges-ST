'From Pharo5.0 of 16 April 2015 [Latest update: #50761] on 23 October 2016 at 12:49:46.985625 pm'!Magnitude subclass: #Number	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Numbers'!!Number commentStamp: '<historical>' prior: 0!Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If	self<typeA> op: arg<typeB>fails because of incompatible types, then it is retried in the following guise:	(arg adaptTypeA: self) op: arg adaptToTypeA.This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Pharo.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.Implementation notes----------------------------------The implementation of #degreeCos and #degreeSin is such that results are exact for any multiple of 90.Care is also taken to evaluate the sine between -90° and 90°, this will avoid #degreesToRadians and i386 FPU sine function to accumulate round off errors due to approximate representation of pi.We can thus evaluate 240 degreeCos with at most 1 ulp error. It's not perfect, but better than previous implementation.For cosine, we know that:	cosd(x)=cosd(abs(x))	cosd(x)=sind(90-x)thus the trick is to evaluate:	cosd(x)=sind(90-abs(x)) after appropriate modulo in [-180,180[This way, we are sure to evaluate the sine between -90° and 90°The #degreesToRadians and #sin are used rather than #degreeSin to avoid cycles.For sine, it would be necessary to evaluate eithersind(x) if abs(x) <=90or sind(180-x) if abs(x) >= 90A possible implementation would be:	| x |	x := 90 + self \\ 360 - 90.	x >= 180 ifTrue: [x := 180 - x].	^x degreesToRadians sinWe prefer evaluating cosd(90-x) thus providing a branch free implementation.!!Number methodsFor: '*GossipBusDriverkata-converting' stamp: 'vitor 10/13/2016 09:04'!asBusStop	^ BusStop for: self.! !!Number methodsFor: 'testing'!isNumber	^ true! !!Number methodsFor: 'testing' stamp: 'tao 4/19/98 23:33'!isInfinite	^ false! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:17'!positive	"Answer whether the receiver is positive or equal to 0. (ST-80 protocol).	See also strictlyPositive"	^ self >= 0! !!Number methodsFor: 'testing'!even	"Answer whether the receiver is an even number."	^self \\ 2 = 0! !!Number methodsFor: 'testing'!odd	"Answer whether the receiver is an odd number."	^self even == false! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:02'!strictlyPositive	"Answer whether the receiver is mathematically positive."	^ self > 0! !!Number methodsFor: 'testing' stamp: 'tao 10/10/97 16:36'!isNaN	^ false! !!Number methodsFor: 'testing'!isZero	^self = 0! !!Number methodsFor: 'testing' stamp: 'sw 12/30/1998 13:21'!isDivisibleBy: aNumber	aNumber = 0 ifTrue: [^ false].	aNumber isInteger ifFalse: [^ false].	^ (self \\ aNumber) = 0! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:18'!negative	"Answer whether the receiver is mathematically negative."	^ self < 0! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 07:57'!seconds  	^ Duration seconds: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 07:56'!hours  	^ Duration hours: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 07:56'!minutes  	^ Duration minutes: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 16:23'!year  	^self years! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 08:52'!nanoSeconds  	^ Duration nanoSeconds: self.! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 07:57'!weeks  	^ Duration weeks: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 16:23'!nanoSecond  	^ self nanoSeconds ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'CamilloBruni 9/22/2012 10:48'!years  	^ Duration years: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'md 8/28/2013 15:37'!asDuration  	^ Duration seconds: self asInteger ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 16:07'!minute  	^ self minutes ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/24/2012 15:32'!hour  	^ self hours! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 16:00'!milliSecond  	^ self milliSeconds ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'CamilloBruni 6/22/2012 21:48'!asSeconds	^ Duration milliSeconds: self * 1000! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 5/16/2003 07:56'!days  	^ Duration days: self! !!Number methodsFor: '*Kernel-Chronology' stamp: 'brp 9/25/2003 13:16'!milliSeconds  	^ Duration milliSeconds: self ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 15:12'!second  	^ self seconds ! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 15:51'!day  	^ self days! !!Number methodsFor: '*Kernel-Chronology' stamp: 'tbn 10/29/2012 15:15'!week  	^ self weeks ! !!Number methodsFor: 'converting' stamp: 'sw 2/16/1999 18:15'!asNumber	^ self! !!Number methodsFor: 'converting' stamp: 'nice 10/5/2009 21:28'!asSmallPositiveDegrees	"Return the receiver normalized to lie within the range (0, 360)"	^self \\ 360! !!Number methodsFor: 'converting' stamp: 'nice 4/23/2011 02:25'!withNegativeSign	"Answer a number with same magnitude than receiver and negative sign."	^self abs negated! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with a Integer, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting'!asInteger	"Answer an Integer nearest the receiver toward zero."	^self truncated! !!Number methodsFor: 'converting' stamp: 'nice 5/16/2009 22:46'!asScaledDecimal: scale 	"Answer the receiver converted to a ScaledDecimal."		^ ScaledDecimal newFromNumber: self scale: scale! !!Number methodsFor: 'converting'!@ y 	"Primitive. Answer a Point whose x value is the receiver and whose y 	value is the argument. Optional. No Lookup. See Object documentation 	whatIsAPrimitive."	<primitive: 18>	^Point x: self y: y! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting'!degreesToRadians	"The receiver is assumed to represent degrees. Answer the conversion to 	radians."	^self asFloat degreesToRadians! !!Number methodsFor: 'converting' stamp: 'nice 1/4/2009 20:31'!adaptToFloat: rcvr andCompare: selector 	"If I am involved in comparison with a Float, convert rcvr to a	Fraction. This way, no bit is lost and comparison is exact."		rcvr isFinite		ifFalse: [			selector == #= ifTrue: [^false].			selector == #~= ifTrue: [^true].			rcvr isNaN ifTrue: [^ false].			(selector = #< or: [selector = #'<='])				ifTrue: [^ rcvr positive not].			(selector = #> or: [selector = #'>='])				ifTrue: [^ rcvr positive].			^self error: 'unknow comparison selector'].	^ rcvr asTrueFraction perform: selector with: self! !!Number methodsFor: 'converting' stamp: 'SvenVanCaekenberghe 3/8/2012 08:20'!asFloat	"Answer a floating-point number approximating the receiver."	self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'SeanDeNigris 3/19/2015 11:03'!percent	^ self / 100! !!Number methodsFor: 'converting'!radiansToDegrees	"The receiver is assumed to represent radians. Answer the conversion to 	degrees."	^self asFloat radiansToDegrees! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToPoint: rcvr andSend: selector	"If I am involved in arithmetic with a Point, convert me to a Point."	^ rcvr perform: selector with: self@self! !!Number methodsFor: 'converting'!asPoint	"Answer a Point with the receiver as both coordinates; often used to 	supply the same value in two dimensions, as with symmetrical gridding 	or scaling."	^self @ self! !!Number methodsFor: 'converting' stamp: 'dtl 9/25/2004 11:47'!asScaledDecimal	"Answer a scaled decimal number approximating the receiver."	#Numeric.	^ self asScaledDecimal: 8! !!Number methodsFor: 'converting' stamp: 'sw 9/8/97 16:30'!asSmallAngleDegrees	"Return the receiver normalized to lie within the range (-180, 180)"	| pos |	pos := self \\ 360.	pos > 180 ifTrue: [pos := pos - 360].	^ pos"#(-500 -300 -150 -5 0 5 150 300 500 1200) collect: [:n | n asSmallAngleDegrees]"! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:21'!adaptToFloat: rcvr andSend: selector 	"If I am involved in arithmetic with a Float, convert me to a Float."	^ rcvr perform: selector with: self asFloat! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:43'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]! !!Number methodsFor: 'converting' stamp: 'StephaneDucasse 9/7/2013 13:10'!asMargin	^ Margin fromNumber: self.! !!Number methodsFor: '*Mocketry-Domain' stamp: 'DenisKudryashov 4/11/2016 15:35'!isAllowAutoStub	^false! !!Number methodsFor: '*neo-json-core' stamp: 'SvenVanCaekenberghe 6/2/2012 22:17'!neoJsonOn: neoJSONWriter	neoJSONWriter writeFloat: self asFloat! !!Number methodsFor: '*Morphic-Base' stamp: 'cb 6/25/2013 13:24'!defaultLabel	"Answer the default label to be used for an Inspector window on the receiver."	^ super defaultLabel, ': ', self printString! !!Number methodsFor: 'printing'!printStringBase: base	^ String streamContents:		[:strm | self printOn: strm base: base]! !!Number methodsFor: 'printing' stamp: 'nice 3/29/2011 21:39'!printShowingDecimalPlaces: placesDesired	"Print the receiver showing precisely the given number of places desired.  If placesDesired is positive, a decimal point and that many digits after the decimal point will always be shown.  If placesDesired is zero, a whole number will be shown, without a decimal point."	^String new: placesDesired + 10 streamContents: [:aStream |		self printOn: aStream showingDecimalPlaces: placesDesired]"23 printShowingDecimalPlaces: 223.5698 printShowingDecimalPlaces: 2-234.567 printShowingDecimalPlaces: 523.4567 printShowingDecimalPlaces: 023.5567 printShowingDecimalPlaces: 0-23.4567 printShowingDecimalPlaces: 0-23.5567 printShowingDecimalPlaces: 0100000000 printShowingDecimalPlaces: 10.98 printShowingDecimalPlaces: 5-0.98 printShowingDecimalPlaces: 22.567 printShowingDecimalPlaces: 2-2.567 printShowingDecimalPlaces: 20 printShowingDecimalPlaces: 2"! !!Number methodsFor: 'printing' stamp: 'nice 9/25/2007 02:36'!printOn: aStream base: base	"This method should print a representation of the number for the given base,	excluding the base prefix (and the letter r for radix)"		^self subclassResponsibility! !!Number methodsFor: 'printing'!storeStringBase: base	^ String streamContents: [:strm | self storeOn: strm base: base]! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:50'!storeOn: aStream 	self printOn: aStream! !!Number methodsFor: 'printing' stamp: 'nice 3/29/2011 21:48'!printOn: aStream showingDecimalPlaces: placesDesired	"Print a representation of the receiver on aStream in decimal notation with prescribed number of places after decimal separator."	| rounder rounded roundedFractionPart |	placesDesired <= 0 ifTrue: [^ self rounded printOn: aStream].	rounder := 10 raisedToInteger: placesDesired.	rounded := self roundTo: rounder reciprocal.	rounded negative ifTrue: [aStream nextPut: $-].	rounded := rounded abs.	rounded integerPart truncated printOn: aStream.	aStream nextPut: $..	roundedFractionPart := (rounded fractionPart * rounder) truncated.	roundedFractionPart printOn: aStream base: 10 length: placesDesired padded: true! !!Number methodsFor: 'printing' stamp: 'nice 9/25/2007 02:35'!storeOn: aStream base: base	"This method should print a representation of the number for the given base,	including the base prefix (with letter r for radix)"		^self subclassResponsibility! !!Number methodsFor: 'printing' stamp: 'sw 7/1/1998 12:33'!stringForReadout	^ self rounded printString! !!Number methodsFor: 'printing' stamp: 'laza 3/30/2004 10:50'!printString	^self printStringBase: 10! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:53'!printOn: aStream	self printOn: aStream base: 10! !!Number methodsFor: '*monticellofiletree-core' stamp: 'dkh 4/6/2012 15:56:14'!writeCypressJsonOn: aStream forHtml: forHtml indent: startIndent    "by default ignore <forHtml> ... <forHtml> is used for Dictionary and Array, i.e., container objects and String which actually encodes itself differently for HTML"    aStream nextPutAll: self printString! !!Number methodsFor: 'comparing' stamp: 'nice 12/26/2009 18:46'!closeTo: num	"are these two numbers close?"	num isFloat ifTrue: [^ num closeTo: self asFloat].	^[self = num] ifError: [false]! !!Number methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 1/14/2012 17:26'!stonOn: stonWriter	stonWriter writeFloat: self asFloat! !!Number methodsFor: '*ston-core' stamp: 'SvenVanCaekenberghe 11/29/2012 16:26'!stonContainSubObjects 	^ false! !!Number methodsFor: 'arithmetic'!\\ aNumber 	"modulo. Remainder defined in terms of //. Answer a Number with the 	same sign as aNumber. e.g. 9\\4 = 1, -9\\4 = 3, 9\\-4 = -3, 0.9\\0.4 = 0.1."	^self - (self // aNumber * aNumber)! !!Number methodsFor: 'arithmetic'!// aNumber 	"Integer quotient defined by division with truncation toward negative 	infinity. 9//4 = 2, -9//4 = -3. -0.9//0.4 = -3. \\ answers the remainder 	from this division."	^(self / aNumber) floor! !!Number methodsFor: 'arithmetic'!rem: aNumber 	"Remainder defined in terms of quo:. Answer a Number with the same 	sign as self. e.g. 9 rem: 4 = 1, -9 rem: 4 = -1. 0.9 rem: 0.4 = 0.1."	^self - ((self quo: aNumber) * aNumber)! !!Number methodsFor: 'arithmetic' stamp: 'GabrielOmarCotelli 5/23/2009 20:20'!reciprocal	"Returns the reciprocal of self.	In case self is 0 the / signals ZeroDivide"		^1 / self! !!Number methodsFor: 'arithmetic'!* aNumber 	"Answer the result of multiplying the receiver by aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!+ aNumber 	"Answer the sum of the receiver and aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!/ aNumber 	"Answer the result of dividing the receiver by aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!- aNumber 	"Answer the difference between the receiver and aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!abs	"Answer a Number that is the absolute value (positive magnitude) of the 	receiver."	self < 0		ifTrue: [^self negated]		ifFalse: [^self]! !!Number methodsFor: 'arithmetic' stamp: 'CamilloBruni 7/13/2012 19:09'!quo: aNumber 	"Integer quotient defined by division with truncation toward zero. 		-9 quo: 4 = -2.	-0.9 quo: 0.4 = -2. 		rem: answers the remainder from this division."	^(self / aNumber) truncated! !!Number methodsFor: 'arithmetic'!negated	"Answer a Number that is the negation of the receiver."	^0 - self! !!Number methodsFor: '*StateSpecs-Specs' stamp: 'dik 14.2.08 21:39'!isEqual: aNumber within: accuracy 	^(self - aNumber) abs < accuracy! !!Number methodsFor: 'mathematical functions' stamp: 'CamilloBruni 7/10/2012 22:24'!** exponent 	" A shortcut methog for raisedTo: "	^ self raisedTo: exponent! !!Number methodsFor: 'mathematical functions'!tan	"The receiver represents an angle measured in radians. Answer its 	tangent."	^self asFloat tan! !!Number methodsFor: 'mathematical functions' stamp: 'jmv 10/11/2011 08:34'!sqrt	"Answer the square root of the receiver."	self subclassResponsibility! !!Number methodsFor: 'mathematical functions'!cos	"The receiver represents an angle measured in radians. Answer its cosine."	^self asFloat cos! !!Number methodsFor: 'mathematical functions'!log: aNumber 	"Answer the log base aNumber of the receiver."	^self ln / aNumber ln! !!Number methodsFor: 'mathematical functions' stamp: 'jmv 10/13/2011 08:50'!raisedTo: aNumber 	"Answer the receiver raised to aNumber."	aNumber isInteger ifTrue: [		"Do the special case of integer power"		^ self raisedToInteger: aNumber].	aNumber isFraction ifTrue: [		"Special case for fraction power"		^ (self nthRoot: aNumber denominator) raisedToInteger: aNumber numerator ].	self < 0 ifTrue: [		^ ArithmeticError signal: 'Negative numbers can''t be raised to float powers.' ].	0 = aNumber ifTrue: [^ self class one].	"Special case of exponent=0"	1 = aNumber ifTrue: [^ self].	"Special case of exponent=1"	0 = self ifTrue: [				"Special case of self = 0"		aNumber < 0			ifTrue: [^ (ZeroDivide dividend: self) signal]			ifFalse: [^ self]].	^ (aNumber * self ln) exp		"Otherwise use logarithms"! !!Number methodsFor: 'mathematical functions'!sin	"The receiver represents an angle measured in radians. Answer its sine."	^self asFloat sin! !!Number methodsFor: 'mathematical functions' stamp: 'nice 4/23/2011 02:26'!copySignTo: aNumber	"Return a number with same magnitude as aNumber and same sign as self."	^ self positive		ifTrue: [aNumber abs]		ifFalse: [aNumber withNegativeSign].! !!Number methodsFor: 'mathematical functions'!ln	"Answer the natural log of the receiver."	^self asFloat ln! !!Number methodsFor: 'mathematical functions' stamp: 'nice 12/11/2012 19:18'!floorLog: radix	"Answer the floor of the log base radix of the receiver."	^(self log: radix) floor! !!Number methodsFor: 'mathematical functions'!exp	"Answer the exponential of the receiver as a floating point number."	^self asFloat exp! !!Number methodsFor: 'mathematical functions' stamp: 'jmv 10/13/2011 08:36'!nthRoot: aPositiveInteger	"Answer the nth root of the receiver."	self subclassResponsibility! !!Number methodsFor: 'mathematical functions'!arcTan	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^self asFloat arcTan! !!Number methodsFor: 'mathematical functions'!c package: 'XML-Tests-Parser' with: 'XML-Tests-Parser-monty.161'.                ].! !!Number methodsFor: 'mathematical functions' stamp: 'di 9/8/1998 17:10'!log	"Answer the base-10 log of the receiver."	^self asFloat log! !!Number methodsFor: 'mathematical functions' stamp: 'Janniklaval 10/23/2010 13:47'!sign: aNumber 	"Return a Number with the same sign as aNumber"  	^ aNumber copySignTo: self.! !!Number methodsFor: 'mathematical functions' stamp: 'jsp 2/24/1999 15:20'!arcTan: denominator	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^(self asFloat) arcTan: denominator.! !!Number methodsFor: 'mathematical functions' stamp: 'nice 10/31/2010 22:03'!degreeCos	"Answer the cosine of the receiver taken as an angle in degrees."		^ (90 - (180 + self \\ 360 - 180) abs) degreesToRadians sin! !!Number methodsFor: 'mathematical functions' stamp: 'GabrielOmarCotelli 5/26/2009 19:49'!raisedToInteger: anInteger	"The 0 raisedToInteger: 0 is an special case. In some contexts must be 1 and in others must	be handled as an indeterminate form.	I take the first context because that's the way that was previously handled.	Maybe further discussion is required on this topic."		|bitProbe result|	anInteger negative ifTrue: [^(self raisedToInteger: anInteger negated) reciprocal].	bitProbe := 1 bitShift: anInteger highBit - 1. 	result := self class one.  	[		(anInteger bitAnd: bitProbe) = 0 ifFalse: [result := result * self].       bitProbe := bitProbe bitShift: -1.		bitProbe > 0 ]	whileTrue: [result := result * result].		^result! !!Number methodsFor: 'mathematical functions'!arcSin	"The receiver is the sine of an angle. Answer the angle measured in 	radians."	^self asFloat arcSin! !!Number methodsFor: 'mathematical functions' stamp: 'NicolaiHess 5/30/2015 11:13'!interpolateTo: aNumber at: param    ^  self * (1 - param) + (aNumber * param)! !!Number methodsFor: 'mathematical functions' stamp: 'nice 10/31/2010 22:01'!degreeSin	"Answer the sine of the receiver taken as an angle in degrees."		^(90 - self) degreeCos! !!Number methodsFor: 'mathematical functions'!sign	"Answer 1 if the receiver is greater than 0, -1 if less than 0, else 0."	self > 0 ifTrue: [^1].	self < 0 ifTrue: [^-1].	^0! !!Number methodsFor: 'mathematical functions' stamp: 'CamilloBruni 7/13/2012 17:37'!% aNumber 	"modulo. Remainder defined in terms of //. Answer a Number with the 	same sign as aNumber. e.g. 9\\4 = 1, -9\\4 = 3, 9\\-4 = -3, 0.9\\0.4 = 0.1."	^ self \\ aNumber! !!Number methodsFor: 'mathematical functions'!arcCos 	"The receiver is the cosine of an angle. Answer the angle measured in 	radians."	^self asFloat arcCos! !!Number methodsFor: 'intervals' stamp: 'tao 1/30/1999 08:58'!to: stop by: step do: aBlock 	"Normally compiled in-line, and therefore not overridable.	Evaluate aBlock for each element of the interval (self to: stop by: step)."	| nextValue |	nextValue := self.	step = 0 ifTrue: [self error: 'step must be non-zero'].	step < 0		ifTrue: [[stop <= nextValue]				whileTrue: 					[aBlock value: nextValue.					nextValue := nextValue + step]]		ifFalse: [[stop >= nextValue]				whileTrue: 					[aBlock value: nextValue.					nextValue := nextValue + step]]! !!Number methodsFor: 'intervals'!to: stop	"Answer an Interval from the receiver up to the argument, stop, 	incrementing by 1."	^Interval from: self to: stop by: 1! !!Number methodsFor: 'intervals'!to: stop by: step	"Answer an Interval from the receiver up to the argument, stop, 	incrementing by step."	^Interval from: self to: stop by: step! !!Number methodsFor: 'intervals'!to: stop do: aBlock 	"Normally compiled in-line, and therefore not overridable.	Evaluate aBlock for each element of the interval (self to: stop by: 1)."	| nextValue |	nextValue := self.	[nextValue <= stop]		whileTrue: 			[aBlock value: nextValue.			nextValue := nextValue + 1]! !!Number methodsFor: 'truncation and round off' stamp: 'CamilloBrui 7/8/2011 12:17'!roundUpTo: aNumber 	"Answer the next multiple of aNumber toward infinity that is nearest the receiver.	Examples:               3.1479 roundUpTo: 0.01 -> 3.15               3.1479 roundUpTo: 0.1 -> 3.2               1923 roundUpTo: 10 -> 1930               3.1479 roundUpTo: 0.005 -> 3.15               -3.1479 roundUpTo: 0.01 -> -3.14"	^(self / aNumber) ceiling * aNumber! !!Number methodsFor: 'truncation and round off' stamp: 'di 10/4/1999 08:08'!roundTo: quantum 	"Answer the nearest number that is a multiple of quantum."	^(self / quantum) rounded * quantum! !!Number methodsFor: 'truncation and round off'!floor	"Answer the integer nearest the receiver toward negative infinity."	| truncation |	truncation := self truncated.	self >= 0 ifTrue: [^truncation].	self = truncation		ifTrue: [^truncation]		ifFalse: [^truncation - 1]! !!Number methodsFor: 'truncation and round off' stamp: 'AlexandreBergel 8/21/2011 17:45'!ceiling       "Answer the integer nearest the receiver toward  infinity."       | truncation |       truncation := self truncated.       self <= 0 ifTrue: [ ^ truncation ].       ^ self = truncation               ifTrue: [ truncation ]               ifFalse: [ truncation + 1 ]! !!Number methodsFor: 'truncation and round off' stamp: 'GuillermoPolito 6/22/2012 14:49'!round: numberOfWishedDecimal	self subclassResponsibility! !!Number methodsFor: 'truncation and round off' stamp: 'CamilloBrui 7/8/2011 12:17'!truncateTo: aNumber 	"Answer the next multiple of aNumber toward zero that is nearest the receiver.	Examples:               3.1479 truncateTo: 0.01 -> 3.14               3.1479 truncateTo: 0.1 -> 3.1               1923 truncateTo: 10 -> 1920               3.1479 truncateTo: 0.005 -> 3.145               -3.1479 truncateTo: 0.01 -> -3.14"	^(self quo: aNumber) * aNumber! !!Number methodsFor: 'truncation and round off'!reduce    "If self is close to an integer, return that integer"    ^ self! !!Number methodsFor: 'truncation and round off' stamp: 'GabrielOmarCotelli 5/26/2009 21:57'!integerPart	"Added for ANSI compatibility"	^self truncated! !!Number methodsFor: 'truncation and round off' stamp: 'StephaneDucasse 5/8/2010 17:14'!fractionPart	"Added for ANSI compatibility"	^self - self integerPart! !!Number methodsFor: 'truncation and round off'!rounded	"Answer the integer nearest the receiver."	^(self + (self sign / 2)) truncated! !!Number methodsFor: 'truncation and round off'!truncated	"Answer an integer nearest the receiver toward zero."	^self quo: 1! !!Number methodsFor: 'truncation and round off' stamp: 'di 2/19/98 21:58'!detentBy: detent atMultiplesOf: grid snap: snap	"Map all values that are within detent/2 of any multiple of grid to that multiple.  Otherwise, if snap is true, return self, meaning that the values in the dead zone will never be returned.  If snap is false, then expand the range between dead zones so that it covers the range between multiples of the grid, and scale the value by that factor."	| r1 r2 |	r1 := self roundTo: grid.  "Nearest multiple of grid"	(self roundTo: detent) = r1 ifTrue: [^ r1].  "Snap to that multiple..."	snap ifTrue: [^ self].  "...or return self"	r2 := self < r1  "Nearest end of dead zone"		ifTrue: [r1 - (detent asFloat/2)]		ifFalse: [r1 + (detent asFloat/2)].	"Scale values between dead zones to fill range between multiples"	^ r1 + ((self - r2) * grid asFloat / (grid - detent))"	(170 to: 190 by: 2) collect: [:a | a detentBy: 10 atMultiplesOf: 90 snap: true] 	(170 to: 190 by: 2) collect: [:a | a detentBy: 10 atMultiplesOf: 90 snap: false]	(3.9 to: 4.1 by: 0.02) collect: [:a | a detentBy: 0.1 atMultiplesOf: 1.0 snap: true] 	(-3.9 to: -4.1 by: -0.02) collect: [:a | a detentBy: 0.1 atMultiplesOf: 1.0 snap: false]"! !!Number methodsFor: 'truncation and round off' stamp: 'CamilloBrui 7/8/2011 12:17'!roundDownTo: aNumber	"Answer the next multiple of aNumber toward negative infinity that is nearest the receiver. 	Examples:               3.1479 roundDownTo: 0.01 -> 3.14               3.1479 roundDownTo: 0.1 -> 3.1               1923 roundDownTo: 10 -> 1920               3.1479 roundDownTo: 0.005 -> 3.145               -3.1479 roundDownTo: 0.01 -> -3.15"		^(self / aNumber) floor * aNumber! !!Number methodsFor: '*GT-Inspector' stamp: 'AndreiChis 4/20/2016 17:55'!gtInspectorHash	^ self hash! !!Number methodsFor: '*Fizzbuzz' stamp: 'vitormcruz 5/12/2016 16:52'!asStringFizzBuzz	|fizzBuzzString|	fizzBuzzString :=  NonConcatenableString forString: self asString.	self \\ 3 = 0 ifTrue: [fizzBuzzString := fizzBuzzString,  'Fizz'].	self \\ 5 = 0 ifTrue: [fizzBuzzString := fizzBuzzString,  'Buzz'].	^fizzBuzzString asString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Number class	instanceVariableNames: ''!!Number class methodsFor: '*AST-Core-Parser' stamp: 'MarcusDenker 11/15/2013 10:54'!readFrom: stringOrStream ifFail: aBlock	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If input does not represent a valid number, then execute fail block	and leave the stream positioned before offending character"		^(NumberParser on: stringOrStream) failBlock: aBlock; nextNumber! !!Number class methodsFor: '*AST-Core-Parser' stamp: 'YuriyTymchuk 10/29/2013 11:14'!readFrom: stringOrStream 	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If stringOrStream does not start with a valid number description, fail."		^(NumberParser on: stringOrStream) nextNumber! !!Number class methodsFor: '*AST-Core-Parser' stamp: 'YuriyTymchuk 10/29/2013 11:10'!squeezeNumberOutOfString: stringOrStream	"Try and find a number in this string. First, look if the string 	starts with a number. Then, see if it ends with a number. Then,	remove a character from the front and see if the remaining 	string makes a number. Repeat the process until no characters	are left or the number has been found. As soon as a number is	found, it is returned. Otherwise, the method fails."	^ NumberParser squeezeNumberOutOfString: stringOrStream! !!Number class methodsFor: '*AST-Core-Parser' stamp: 'YuriyTymchuk 10/29/2013 11:10'!squeezeNumberOutOfString: stringOrStream ifFail: aBlock	"Try and find a number in this string. First, look if the string 	starts with a number. Then, see if it ends with a number. Then,	remove a character from the front and see if the remaining 	string makes a number. Repeat the process until no characters	are left or the number has been found. As soon as a number is	found, it is returned. Otherwise, the method fails."	^ NumberParser squeezeNumberOutOfString: stringOrStream onError: aBlock! !!Number class methodsFor: '*AST-Core-Parser' stamp: 'YuriyTymchuk 10/29/2013 11:10'!readFrom: stringOrStream base: base	"Answer a number as described on aStream in the given number base.	If stringOrStream does not start with a valid number description, answer 0 for backward compatibility. This is not clever and should better be changed."	^(NumberParser on: stringOrStream) nextNumberBase: base! !!Number class methodsFor: 'constants' stamp: 'GabrielOmarCotelli 5/23/2009 20:46'!one	^1! !!Number class methodsFor: 'deprecated' stamp: 'CamilloBruni 8/1/2012 16:14'!readRemainderOf: integerPart from: aStream base: base withSign: sign 	"Read optional fractional part and exponent or decimal scale, and return the final result"	"Number readFrom: '3r-22.2'"	| value fractionDigits fracpos fractionPart fraction pos v foundDecimal |	value := integerPart.	fractionDigits := 0.	foundDecimal := false.	(aStream peekFor: $.)		ifTrue: ["<integer>.<fraction>"			foundDecimal := true.			(aStream atEnd not					and: [aStream peek digitValue between: 0 and: base - 1])				ifTrue: [fracpos := aStream position.					fractionPart := Integer readFrom: aStream base: base.					fraction := fractionPart asFloat								/ (base raisedTo: aStream position - fracpos).					fractionDigits := aStream position - fracpos.					value := value asFloat + fraction]].	pos := aStream position.	(v := self readScaledDecimal: integerPart			fractionPart: fractionPart			digits: fractionDigits			base: base			sign: sign			from: aStream)		ifNil: [aStream position: pos]		ifNotNil: [^ v "<number>s<scale>>"].	pos := aStream position.	(v := self readExponent: value base: base from: aStream)		ifNil: [aStream position: pos.			(foundDecimal and: [fractionDigits = 0])				ifTrue: ["oops - just <integer>."							aStream skip: -1.							"un-gobble the period"							^ value * sign]]		ifNotNil: [value := v "<number>(e|d|q)<exponent>>"].	(value isFloat			and: [value = 0.0					and: [sign = -1]])		ifTrue: [^ Float negativeZero]		ifFalse: [^ value * sign]! !!Number class methodsFor: 'deprecated' stamp: 'dtl 7/3/2006 17:41'!readExponent: baseValue base: base from: aStream	"Complete creation of a number, reading exponent from aStream. Answer the	number, or nil if parsing fails.	<number>(e|d|q)<exponent>>"	| sign exp value |	('edq' includes: aStream next) ifFalse: [^ nil].	sign := ((aStream peek) == $-)		ifTrue: [aStream next. -1]		ifFalse: [1].	(aStream atEnd or: [(aStream peek digitValue between: 0 and: 9) not])		ifTrue: [^ nil]. "Avoid throwing an error"	exp := (Integer readFrom: aStream base: 10) * sign.	value := baseValue * (base raisedTo: exp).	^ value! !!Number class methodsFor: 'deprecated' stamp: 'ClementBera 7/26/2013 16:28'!readScaledDecimal: integerPart fractionPart: fractionPart digits: fractionDigits base: base sign: sign from: aStream 	"Complete creation of a ScaledDecimal, reading scale from aStream. Answer	a ScaledDecimal, or nil if parsing fails.	<number>s[<scale>]"	| scale decimalMultiplier decimalFraction |	aStream atEnd ifTrue: [^ nil].	(aStream next == $s) ifFalse: [^ nil].	"<number>s<scale>"	(aStream atEnd not and: [aStream peek digitValue between: 0 and: 9])		ifTrue: [scale := Integer readFrom: aStream]		ifFalse: [^ nil].	scale 		ifNil: ["<number>s"			fractionDigits = 0				ifTrue: ["<integer>s"					scale := 0]				ifFalse: ["<integer>.<fraction>s"					scale := fractionDigits]].	fractionPart 		ifNil: [^integerPart * sign asScaledDecimal: scale]		ifNotNil: [decimalMultiplier := base raisedTo: fractionDigits.			decimalFraction := integerPart * decimalMultiplier + fractionPart * sign / decimalMultiplier.			^decimalFraction asScaledDecimal: scale]! !!Number class methodsFor: '*GT-InspectorExtensions-Core' stamp: 'StefanReichhart 9/6/2015 17:23'!gtExampleFourtyTwo	<gtExample>	<label: '42'>		^ 42! !!Number class methodsFor: '*System-Settings-Browser' stamp: 'alain.plantec 3/18/2009 15:09'!settingInputWidgetForNode: aSettingNode	^ aSettingNode inputWidgetForNumber! !!Number class methodsFor: '*Tools' stamp: 'SeanDeNigris 5/28/2013 17:48'!canonicalArgumentName	^ 'aNumber'.! !